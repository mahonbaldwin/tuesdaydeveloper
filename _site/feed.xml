<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tuesdayDeveloper;</title>
    <description>tech opinions and how-tos</description>
    <link>http://tuesdaydeveloper.com/</link>
    <atom:link href="http://tuesdaydeveloper.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 11 Jul 2016 12:38:32 -0700</pubDate>
    <lastBuildDate>Mon, 11 Jul 2016 12:38:32 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Why Your Program Looks Awful</title>
        <description>&lt;p&gt;A cautionary tale of application development.&lt;/p&gt;

&lt;h2 id=&quot;sprint-1&quot;&gt;Sprint 1&lt;/h2&gt;

&lt;h4 id=&quot;story-1-feature&quot;&gt;story 1 (feature)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Estimation:&lt;/strong&gt; 5&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specification:&lt;/strong&gt; Create a plane figure with three straight lines of equal length that meet at the ends forming a total of three interior equiangular angles.&lt;/p&gt;

&lt;h3 id=&quot;sprint-1-result&quot;&gt;Sprint 1 Result&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://tuesdaydeveloper.com/assets/11jul2016-sprint1.png&quot; alt=&quot;Sprint 1 Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A plane figure with three relatively straight lines with one line only slightly longer than the other two forming three interior angles, close to equal. We are only human, we can’t draw perfectly.&lt;/p&gt;

&lt;p&gt;We receive accolades for a sprint well done.&lt;/p&gt;

&lt;h2 id=&quot;sprint-2&quot;&gt;Sprint 2&lt;/h2&gt;

&lt;h4 id=&quot;story-2-bug&quot;&gt;story 2 (bug)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Estimation:&lt;/strong&gt; 5&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specification&lt;/strong&gt; The longer line needs to be shortened to be equal to the other two, lines still need to meet. Oh, and can you make it blue?&lt;/p&gt;

&lt;h4 id=&quot;story-3-feature&quot;&gt;story 3 (feature)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Specification&lt;/strong&gt; We need to have a fourth side added to our figure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Estimation:&lt;/strong&gt; 2&lt;/p&gt;

&lt;h3 id=&quot;sprint-2-result&quot;&gt;Sprint 2 Result&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://tuesdaydeveloper.com/assets/11jul2016-sprint2.png&quot; alt=&quot;Sprint 2 Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A figure that looks like that of the first (with a few lines erased and redrawn leaving some artifacts of old code) one of the lines is now blue. On the top there is a fourth side protruding (like a tangent) that does not connect to anything. &lt;em&gt;In the defense of the programmers, this is a perfectly valid response to the specifications that were given.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;sprint-3&quot;&gt;Sprint 3&lt;/h2&gt;

&lt;h4 id=&quot;story-4-bug&quot;&gt;story 4 (bug)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Specification&lt;/strong&gt; Connect the end of line three with the end of line four.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Estimation:&lt;/strong&gt; 2&lt;/p&gt;

&lt;h3 id=&quot;sprint-3-result&quot;&gt;Sprint 3 Result&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://tuesdaydeveloper.com/assets/11jul2016-sprint3.png&quot; alt=&quot;Sprint 3 Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like a rhombus, with a few lines erased.&lt;/p&gt;

&lt;p&gt;We relieve hesitant pats on the back right after they ask why we only got 2 points of work done when we got 7 done last spring and 5 the sprint before.&lt;/p&gt;

&lt;h2 id=&quot;ad-infinitum&quot;&gt;ad infinitum&lt;/h2&gt;

&lt;p&gt;This results in Sprint 4 which asks to make all connecting lines perfectly perpendicular (because what they wanted the whole time was a square), and the process continues.&lt;/p&gt;

&lt;h2 id=&quot;programming-vs-building-cars&quot;&gt;Programming vs. Building Cars&lt;/h2&gt;

&lt;p&gt;Building programs is a lot like building cars—you have to smash a few to make sure the rest are safe. We rarely understand what a program should look like from the beginning. It takes a lot of deliberate thought and patience before the design of an application emerges. Sometimes you have to try and fail so you know how to try again. People do this in other fields too. Successful entrepreneurs will tell you that their first 50 businesses were failures. Published authors will speak of their many, many rejection letters. Artists, rarely become famous overnight. Sometimes programmers will have to try out one design before they realize its flaws.&lt;/p&gt;

&lt;p&gt;But programming is also like raising children. Parents &lt;em&gt;may not&lt;/em&gt; smash their children! Even if they mess up. If you mess up somehow (maybe you lose your temper and yell) you have to work with the result. Sometimes the application you have in production is what you have to work with and you can’t just start over. But you’re still going to make mistakes, so what do you do?&lt;/p&gt;

&lt;p&gt;This is what agile is all about. You get to define the parameters over how frequently you might fail but not whether you will fail. Sometimes you have to refactor greatly (e.g. even throw away part of your code) so that the program delivered is the program being asked for. The initial architecture of an application may not be what you will want to end up with and so you have to change it. But you have to work with what you’ve got now to produce what you really need.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-math&quot; data-lang=&quot;math&quot;&gt;x = current application

f(x) =&amp;gt; x&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that there were lines that didn’t get completely erased in the example above. These should have been removed, but we ran out of sprint and so they’ll probably live there until some poor soul comes along and wonders what on earth this is supposed to do and he asks a lot of questions about the code and he maybe (in a fit of bravery) removes it, is relieved that all the tests pass, but he doesn’t sleep well for a couple nights because he’s afraid that he’ll get a call reporting some error in the application due to the code that didn’t seem to do anything….&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix-it&quot;&gt;How to fix it&lt;/h2&gt;

&lt;p&gt;Like many things the only thing we can do is be careful and attentive in our work. We have to take time to think and design &lt;em&gt;before&lt;/em&gt; we start coding. There’s a great quote I heard recently “I find that weeks of coding and testing can save me hours of design.”&lt;sup id=&quot;fnref:design&quot;&gt;&lt;a href=&quot;#fn:design&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; We have to double check our work after we commit, and it’s really helpful if we take time to make the code we just finished easier to read. Ask your neighbor if he understands the code in its current state. Refactor until you think it’s easier to understand.&lt;/p&gt;

&lt;h2 id=&quot;problems-out-of-our-hands&quot;&gt;Problems out of our hands&lt;/h2&gt;

&lt;p&gt;There are problems that are implicit to the tools we use or the domain we’re in. We should try to reduce complexity as much as possible. Use a better tool if possible, but there will still be some things that will be complicated about our application whether we like it or not. I still believe that we should refactor to simplicity as much as we can, knowing that there may be a limit.&lt;/p&gt;

&lt;h2 id=&quot;its-only-going-to-be-used-once&quot;&gt;It’s only going to be used once&lt;/h2&gt;

&lt;p&gt;If your application is only going to be used one time to parse a million records from one format and input them into another, maybe you don’t have to follow these rules. If there is even a chance that you or anyone else will have to read the code again, I urge you to take some time to save time down the road.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:design&quot;&gt;
      &lt;p&gt;I’m sorry I couldn’t find a source for this. &lt;a href=&quot;#fnref:design&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 12:34:56 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/design/agile/2016/07/11/why-your-program-looks-awful.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/design/agile/2016/07/11/why-your-program-looks-awful.html</guid>
        
        
        <category>design</category>
        
        <category>agile</category>
        
      </item>
    
      <item>
        <title>Testing Done Right</title>
        <description>&lt;p&gt;How do I know a test is good?&lt;/p&gt;

&lt;p&gt;How do I know I have the right tests?&lt;/p&gt;

&lt;p&gt;How do I know that the tests that are written &lt;em&gt;actually&lt;/em&gt; highlight errors in the application when they fail?&lt;/p&gt;

&lt;p&gt;I’ve had these questions for a while. I’m not really sure I can answer them yet.&lt;/p&gt;

&lt;p&gt;I think that knowing how to test an application is way more complicated than we treat it.&lt;/p&gt;

&lt;p&gt;Take code coverage for example. For some reason we’ve gotten it into our heads that if we visit all the lines (or branches) of a method then we’ve done enough testing. This is simple enough to disprove:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we &lt;code&gt;assertEquals(add5(1), 6)&lt;/code&gt; we’ve visited all the lines of code and we’re done, right? What happens when you call &lt;code&gt;add5(2147483646)&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Even if we are in the habit of considering edge cases, null cases, zero cases, and suit cases I don’t think I’ve seen tests that are really &lt;em&gt;valuable&lt;/em&gt; in real life.&lt;/p&gt;

&lt;p&gt;Perhaps one of the things that bothers me the most about unit tests is a reaction not uncommon when they fail. If your immediate reaction is to fix the test, what is the point of your test in the first place? If tests exist just so we can fix them when they fail, we’re just making more work for ourselves.&lt;/p&gt;

&lt;p&gt;Of course I’m not saying that writing tests is bad nor that they shouldn’t be fixed when they fail. My point is, if a unit test fails there must be a series of questions we ask ourselves including whether the new code we’ve written is right and whether the test was right in the first place and if the change we made in the code is one that is correct and if we expect this unit test to fail. We may even have to reconsider if this unit test is still valuable to us. We can’t just say, “Oh, I changed &lt;code&gt;add5()&lt;/code&gt; to &lt;code&gt;return x + 6&lt;/code&gt; so I need to change the unit tests.” Yes, that is as ridiculous as it sounds.&lt;/p&gt;

&lt;h2 id=&quot;essential-testing&quot;&gt;Essential Testing&lt;/h2&gt;
&lt;p&gt;When I learned to program I was trained to think in a very imperative mindset. &lt;code&gt;step1; step2; step3;&lt;/code&gt; As I matured in my career I was introduced to a declarative mind set. The difference I think was answering the question ‘What should it do?’ rather than ‘How should it do it?’. I’ve begun to think of testing in the same way. Rather than asserting every conceivable validation we can think of, we should think of the essential properties of what an algorithm should do.&lt;/p&gt;

&lt;p&gt;After watching an &lt;a href=&quot;https://www.youtube.com/watch?v=Tb823aqgX_0&quot;&gt;excellent talk about bottom up programming&lt;/a&gt; I decided to play around a little and write a simple app that shuffled a deck of cards. Each card has two keywords in a vector representing the suit and the rank like this: &lt;code&gt;[:hearts :two]&lt;/code&gt;. I came up with a pretty simple solution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:two&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:three&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:four&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:five&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:six&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:seven&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:nine&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ten&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:jack&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:queen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:king&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:hearts&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:diamonds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:spades&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:clubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course I tested this in the REPL and I saw what I expected, but I doubted that I had done it correctly the first time (because that never happens) so I started to write some unit tests.&lt;/p&gt;

&lt;p&gt;My first unit tests were a mess:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck-assertions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testing deck &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:clubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:king&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deftest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test-shuffle-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deck-assertions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deck-assertions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;not=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deftest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test-new-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:hearts&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:hearts&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:clubs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:queen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:clubs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:king&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are good aspects of the code, but I had 86 lines of test code when the code I was testing only had 8. I wasn’t too concerned with the tests having more lines than the solution, but I felt that my tests were missing something. That’s when I added:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which I think is probably the first good test I wrote. But I wanted to wright a test that verified that two shuffled decks were probably different. My first naïve test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;not=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But I didn’t think that was good enough so I wrote another naïve test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;not=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatedly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But there’s a problem with this test. It doesn’t provide any real knowledge. If it fails then all 100 &lt;code&gt;shuffled-deck&lt;/code&gt;s contain cards that are in the same order. If it passes I know only that one deck is different than the other 99.&lt;/p&gt;

&lt;p&gt;I think a better test is this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;990&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatedly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I still generate several shuffled decks, but I get the count of only the unique decks and expect that number to be greater than a large percentage of the generated decks (99% in this case). (So far every time I’ve looked at it, the count of the set of shuffled decks has been 1000).&lt;/p&gt;

&lt;p&gt;At this point I feared that my tests were tautological. I had too many tests that were testing the same thing. But I still wanted to verify that a deck of cards contained 52 cards and that each of these cards were a vector of a suit and a rank, each one being unique. Of course we know that if each card contains one of &lt;code&gt;[:hearts :diamonds :spades :clubs]&lt;/code&gt; as the first value and one of &lt;code&gt;[:ace ... :king]&lt;/code&gt; as its second element and that they all have only two values, then maybe the right answer is something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test-cards&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if-let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:hearts&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:diamonds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:spades&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:clubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:two&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:three&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:four&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:five&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:six&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:seven&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:nine&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ten&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:jack&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:queen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:king&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deftest&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test-shuffle-deck&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test-cards&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;990&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatedly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle-deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 08 Jul 2016 11:49:42 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/testing/2016/07/08/unit-testing.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/testing/2016/07/08/unit-testing.html</guid>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>A New Beginning!</title>
        <description>&lt;p&gt;I’ve been blogging here for more than six years and I’m now excited to announce that I’m transitioning my blog from WordPress to Jekyll (because it’s cool). You’ve probably&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; already noticed the blog layout change which is likely to continue to change in the sort term.&lt;/p&gt;

&lt;p&gt;You’ll also have noticed, my astute reader, that you can’t post comments… I’m working on that.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Unless you don’t read my blog regularly, which you should start, though I can’t really blame you because it’s not like there is a lot of new content here on a regular basis. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 16:30:42 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/housekeeping/2016/06/15/a-new-beginning.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/housekeeping/2016/06/15/a-new-beginning.html</guid>
        
        
        <category>housekeeping</category>
        
      </item>
    
      <item>
        <title>Clojure vs. x</title>
        <description>&lt;p&gt;A week or so ago I was interviewing a candidate to come to work with my company. After briefly explaining why we chose Clojure for our application we asked him if he had any questions about our architecture. “Well,” his eyes flicked to the side before returning eye contact, “why not just use Java?”&lt;/p&gt;

&lt;h2 id=&quot;why-should-i-choose&quot;&gt;Why should I choose…?&lt;/h2&gt;
&lt;p&gt;I’m fascinated by the question, “Why should I choose &lt;em&gt;x&lt;/em&gt; programming language/paradigm/framework/parrot?” Obviously this can be a silly question because a bird that can program can make you a lot of money even if its not very &lt;em&gt;good&lt;/em&gt; at programming! As for the non-fowl-programming-entities, you’ll get a lot more debate as to which has the most merit.&lt;/p&gt;

&lt;p&gt;I’ve been drawn to Clojure for a while now. Clojure is a functional, dynamically-typed, Lisp dialect. I can list for you the air of grievances people have against Clojure even knowing only the short description I provided:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What’s wrong with OO?&lt;/li&gt;
  &lt;li&gt;No types???!!! Seriously?&lt;/li&gt;
  &lt;li&gt;Ugh, the parenthesis!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objections by others asside, I like it and a lot of other people like it too. &lt;a href=&quot;https://www.thoughtworks.com/radar/languages-and-frameworks/clojure&quot;&gt;Clojure comes highly recommended&lt;/a&gt;. It’s even in &lt;a href=&quot;http://www.tiobe.com/tiobe_index&quot;&gt;the top 100 most popular languages&lt;/a&gt;&lt;sup id=&quot;fnref:tiobe&quot;&gt;&lt;a href=&quot;#fn:tiobe&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. But no one can doubt that for one reason or another Clojure is less popular than Java, C#, Ruby, Python, JavaScript, C, C++, even PHP. So this leads me to the question: what makes a programming language &lt;em&gt;popular&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&quot;hammers&quot;&gt;Hammers&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;If all you have is a hammer, everything looks like a nail.&lt;/p&gt;

  &lt;p&gt;—&lt;a href=&quot;https://en.wiktionary.org/wiki/if_all_you_have_is_a_hammer,_everything_looks_like_a_nail&quot;&gt;Abraham Kaplan or Abraham Maslow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hate hearing that phrase. Whichever Abraham said it, it is the single most quoted text I hear when I discuss functional paradigms with other people. And it wasn’t even originally about programming. Is it true?&lt;sup id=&quot;fnref:hammer&quot;&gt;&lt;a href=&quot;#fn:hammer&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Perhaps the sentiment of the quote is true to some degree. I want to point out that there are cases that for which Clojure is not a good fit. I haven’t worked with any, but I know that when working with limited amounts of space or close to the hardware you don’t have higher level languages at your disposal.&lt;/p&gt;

&lt;p&gt;I’m also not saying that Clojure is the only good language nor that it will never be replaced with something better. It is the nature of our profession to continue learning and creating new technologies because we have more knowledge and resources at our disposal. That means that Clojure will be replaced someday.&lt;/p&gt;

&lt;p&gt;I will, however, be bold and say that I think that Clojure is the best tool we have available for most use cases.&lt;/p&gt;

&lt;h2 id=&quot;language-analysis&quot;&gt;Language Analysis&lt;/h2&gt;
&lt;p&gt;To understand how one language is different from another I think that you have to understand the features of a language.&lt;/p&gt;

&lt;h3 id=&quot;language-families&quot;&gt;Language Families&lt;/h3&gt;
&lt;p&gt;One language feature is that of the manner it is written. As far as I know, there are really only two styles of writing software&lt;sup id=&quot;fnref:software-styles&quot;&gt;&lt;a href=&quot;#fn:software-styles&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Those styles are C and LISP. C looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;x = y&lt;/code&gt;. It’s often punctuated with semicolons and feels familiar to anyone has been introduced to high school algebra. LISP looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;(fn x y)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; is a function and &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; are arguments. Everything in LISP is written with lists. In fact, LISP is short for List Processor.&lt;/p&gt;

&lt;p&gt;Since everything is lists in LISPs, this makes for extremely simple syntax, because once you understand that the first symbol of a list (something enclosed in &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;) must be a function&lt;sup id=&quot;fnref:escape-list&quot;&gt;&lt;a href=&quot;#fn:escape-list&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, you basically have the syntax down. I’m not familiar with other LISPs&lt;sup id=&quot;fnref:lisps&quot;&gt;&lt;a href=&quot;#fn:lisps&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, but in Clojure the only syntax you really need to know are lists &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;, maps &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;, vectors &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;, sets &lt;code class=&quot;highlighter-rouge&quot;&gt;#{}&lt;/code&gt;, and a special feature called keywords that start with &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;sup id=&quot;fnref:clj-syntax&quot;&gt;&lt;a href=&quot;#fn:clj-syntax&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;C syntax, on the other hand is more complicated. You usually have a lot of reserved keywords&lt;sup id=&quot;fnref:keywords&quot;&gt;&lt;a href=&quot;#fn:keywords&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; peppered with different punctuation that mean different things based on the context. In Java the &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;for(int i = 0; i &amp;lt; 10; i++)&lt;/code&gt; mean something different than they mean in &lt;code class=&quot;highlighter-rouge&quot;&gt;main(String[] args)&lt;/code&gt; which mean something different than they do in &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print(&quot;Hello World&quot;)&lt;/code&gt;. You might think I’m being anal about this, because they are all fairly similar, but all of those rules have to be written in a compiler and that adds to the complexity to a system.&lt;/p&gt;

&lt;h3 id=&quot;language-styles&quot;&gt;Language Styles&lt;/h3&gt;
&lt;p&gt;There are also different programming &lt;em&gt;paradigms&lt;/em&gt;. I’m not going to get into all of them&lt;sup id=&quot;fnref:lang-styles&quot;&gt;&lt;a href=&quot;#fn:lang-styles&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;, but you could probably say that the two main ones are Imperative Programming and Declarative Programming. The main difference with the two: With imperative programming you tell the computer not only what do do, but how to do it. With declarative you tell the computer what to do, but let it figure out how.&lt;/p&gt;

&lt;p&gt;These sorts of features are cropping up in several different traditional imperative languages. Take the following examples in JavaScript (with the latest ES2015 update has become way better in it’s declarative style).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//imperative style&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//declarative style&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; the same example in clojure for comparison
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When comparing the first style with the subsequent styles, the following quote makes a lot of sense.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OO makes code understandable by encapsulating moving parts.  FP makes code understandable by minimizing moving parts.&lt;/p&gt;

  &lt;p&gt;—&lt;a href=&quot;https://twitter.com/mfeathers/status/29581296216&quot;&gt;Michael Feathers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In general, functional languages seek to have a more declarative style, it is for this reason that functional languages are often considered more expressive.&lt;/p&gt;

&lt;p&gt;With imperative languages you don’t have much of a whole language API. What you really have is a lot of micro APIs. &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; has a set of methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; has a set of methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;YourObject&lt;/code&gt; has a set of methods. Declarative languages tend to have a larger whole language API. In imperative languages you often have separate &lt;code class=&quot;highlighter-rouge&quot;&gt;.equals()&lt;/code&gt; methods. &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.equals()&lt;/code&gt; method is overridden. More often than not, a function that works on a vector will also work on a map &lt;em&gt;and it’s the same function&lt;/em&gt; in declarative languages like Clojure. This philosophy can be summed up in this quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.&lt;/p&gt;

  &lt;p&gt;—&lt;a href=&quot;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&quot;&gt;Alan Perlis&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-is-all-fits&quot;&gt;How is All Fits&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/lang-table.png&quot; alt=&quot;Languages Table&quot; /&gt;
This image is an approximation of how different languages might fit when you look at language style and family. As you can see it seems a bit crowded in the bottom left corner. Of course, you could say that all of the Imperative-C languages have elements of declarative style and they are certainly gaining aspects of declarative notation. I put them there because the typical coding style for someone using those languages is more imperative. As for Scheme, I’ll admit I’m not sure where to put that. I looked on Wikipedia at the Scheme code examples and it looked very imperative to me (which may mean you can write imperative code in any language&lt;sup id=&quot;fnref:imperativeAnyLang&quot;&gt;&lt;a href=&quot;#fn:imperativeAnyLang&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;). In actuality, you’d probably see more languages strataling the line between declarative and imperative.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, why not Java? That’s an excellent question, one that I’m becoming more and more convinced to be qualified to answer that you need to have a psychology degree because selecting your language of choice seems to be such a personal decision. As so many other preferences, it seems to come down to your values:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:tiobe&quot;&gt;
      &lt;p&gt;As of 10 Jun 2016. &lt;a href=&quot;#fnref:tiobe&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hammer&quot;&gt;
      &lt;p&gt;Well if I’m being pedantic, no, it’s not true. You see, nails must be pounded into something like a board, if everything looked like a nail then you’d have to use a hammer to pound nails into nails which doesn’t make much sense. Not to mention the hammer would look like a nail too, so it would be more like using a nail to pound nails into nails. (This is starting to sound like a torture scenario, especially if one or more of those nails is really fingernails. Ehh.) &lt;a href=&quot;#fnref:hammer&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:software-styles&quot;&gt;
      &lt;p&gt;I am not counting coding straight in binary or even assembly code. &lt;a href=&quot;#fnref:software-styles&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:escape-list&quot;&gt;
      &lt;p&gt;You can escape a list so it won’t invoke a function allowing you to use the first space for something other than a function, but for that most of the time you can use vectors. &lt;a href=&quot;#fnref:escape-list&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lisps&quot;&gt;
      &lt;p&gt;From what I understand mosts LISPs have even less syntax. Clojure chose to add a few extra forms to ease in code understanding (which also decreases the number of parentheses by a lot.) &lt;a href=&quot;#fnref:lisps&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:clj-syntax&quot;&gt;
      &lt;p&gt;There are also special meanings for &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;`&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; but you’d be able to read the language just fine even if you didn’t know that. &lt;a href=&quot;#fnref:clj-syntax&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:keywords&quot;&gt;
      &lt;p&gt;Clojure (and as far as I know other LISPs) don’t really have reserved keywords. Yes, you have functions that are predefined for you, but they are all namespaced so you can use really any name that consists of alpha-numeric characters, dashes, and underscores even if it’s used in the core library, but most people don’t. &lt;a href=&quot;#fnref:keywords&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lang-styles&quot;&gt;
      &lt;p&gt;I’m definitely not qualified to talk about all of them. &lt;a href=&quot;#fnref:lang-styles&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:imperativeAnyLang&quot;&gt;
      &lt;p&gt;I tried it in Clojure, it’s possible, but more difficult that just writing idiomatic declarative code. &lt;a href=&quot;#fnref:imperativeAnyLang&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 20:00:42 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/clojure/programming-style/2016/06/06/clojure-vs-x.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/clojure/programming-style/2016/06/06/clojure-vs-x.html</guid>
        
        
        <category>clojure</category>
        
        <category>programming-style</category>
        
      </item>
    
      <item>
        <title>Rounding Errors</title>
        <description>&lt;p&gt;I’m not really sure why, but since I learned about rounding errors I’ve always been fascinated by them. Case in point, I was playing with Clojure’s (range) function and:&lt;/p&gt;

&lt;pre lang=&quot;clojure&quot;&gt;(range 0.1 1.1 0.1)
=&amp;gt;(0.1 0.2 0.30000000000000004 0.4 0.5 0.6 0.7 0.7999999999999999 0.8999999999999999 0.9999999999999999 1.0999999999999999&lt;/pre&gt;

&lt;p&gt;When I tried this out I was expecting ten results—not eleven—something more like:&lt;/p&gt;

&lt;pre lang=&quot;clojure&quot;&gt;(map #(/ % 10.0) (range 1 11))
=&amp;gt;(0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0)&lt;/pre&gt;
</description>
        <pubDate>Tue, 09 Feb 2016 04:34:43 -0800</pubDate>
        <link>http://tuesdaydeveloper.com/2016/02/09/rounding-errors.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/2016/02/09/rounding-errors.html</guid>
        
        
      </item>
    
      <item>
        <title>Agility</title>
        <description>&lt;p&gt;“We’re Agile!” Is one of the most annoying phrases you’ll hear from software companies. I take umbridge with the phrase because you cannot reliably know what someone means when they claim agility. The &lt;a href=&quot;http://www.agilemanifesto.org/&quot; target=&quot;_blank&quot;&gt;Agile Manifesto&lt;/a&gt; came out 15 years this month and has revolutionized the way we develop software. But the world is different than it was in 2001 and I think it’s worth a closer look to determine whether “being Agile” (or what that term has come to mean) is still desirable.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Wed, 16 Dec 2015 05:34:00 -0800</pubDate>
        <link>http://tuesdaydeveloper.com/2015/12/16/agility.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/2015/12/16/agility.html</guid>
        
        
      </item>
    
      <item>
        <title>The Cause of Poor Code</title>
        <description>&lt;p&gt;I said in my last post that I felt that the various codebases I’ve worked on were junk. I however do not think that the various programmers I’ve worked with were poor programmers. While every programmer surly makes mistakes once in a while the truth of the matter isn’t so black and white. There are a couple reasons our precious code base devolves into a disorganized mess. While there are undeniably many reasons for poor code quality, I’ll address the two that I think are the most predominant.&lt;/p&gt;
&lt;h3&gt;Handling Dynamic Requirements&lt;/h3&gt;
&lt;p&gt;When a new project is started, some understanding of what it will do must be delivered to the developers who will be working on it. This is a deliverable from the customers to the developers. It is an unfortunate truth, however, that users don’t know what they want. We can’t blame them for this, it’s often hard to describe, technical know-how is lacking, and even if things are exactly as planned they often don’t hold up to the thing you envisioned in your head. This enumeration is usually true for developers as well. But, even if we don’t blame this problem, it still causes issues (you have to understand a problem to solve it!).&lt;/p&gt;

&lt;p&gt;But it doesn’t stop there. As will invariably happen, even if the requirements were perfectly understood, once a user (or his/her replacement) has had a chance to use the tool you built or after a few weeks, months, or years, a new requirement will pop up. Working with updated requirements will cause difficulties in our code base if handled incorrectly. I am not implying that changing requirements are a problem, it’s what developers do with the changing requirements that can be a problem.  It is perfectly natural for requirements to change and it should be part of any Agile project. The issue arises when a coder looks at the new requirement and (without doing a proper refactor) tries to make it work the same way another feature works when it wasn’t ever intended to work that way.&lt;/p&gt;
&lt;h4&gt;The Solution&lt;/h4&gt;
&lt;p&gt;This is hardly the worst offender, but it is an issue. As eluded to above the solution for this problem is relatively simple (at least on paper): relentless refactoring.&lt;/p&gt;

&lt;p&gt;One of the reasons Relentless Refactoring is prized so much in Extreme Programming is because requirements are continually evolving and changing. Dynamic requirements demand dynamic code, a fresh look at the answer to yesterday’s problem and a conscience effort to morph it into the answer for today’s problem. This does not imply that we will do the minimum necessary to get it to work and it certainly doesn’t imply that we will copy and paste some code and then make a few tweaks to it here and there. It means that we will iteratively take the code we have and change it into the code we need. Sometimes the answer is easy, sometimes a refactor involves substantially new code.&lt;/p&gt;
&lt;h3&gt;Deadlines&lt;/h3&gt;
&lt;p&gt;The next issue seems to often be the cause for a lack of proper refactoring: deadlines. Below I’ve quoted the best description I’ve ever seen that describes the next problem:&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;A Big Ball of Mud is a haphazardly structured, sprawling, sloppy, duct-tape-and-baling-wire, spaghetti-code jungle. These systems show unmistakable signs of &lt;em&gt;unregulated growth&lt;/em&gt;, and &lt;em&gt;repeated, &lt;strong&gt;expedient&lt;/strong&gt; repair&lt;/em&gt;. Information is shared promiscuously among distant elements of the system, often to the point where nearly all the important information becomes global or duplicated. The overall structure of the system may never have been well defined. If it was, it may have eroded beyond recognition. Programmers with a shred of architectural sensibility shun these quagmires. Only those who are unconcerned about architecture, and, perhaps, are comfortable with the inertia of the day-to-day chore of patching the holes in these failing dikes, are content to work on such systems.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;—Brian Foote and Joseph Yoder, &lt;i&gt;Big Ball of Mud.&lt;/i&gt; Fourth Conference on Patterns Languages of Programs (PLoP &#39;97/EuroPLoP &#39;97) Monticello, Illinois, September 1997 (emphasis added, this quote was copied from the Wikipedia entry on &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_ball_of_mud&quot;&gt;Big Ball of Mud&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Software engineers are often between a rock and a firearm when a new feature is requested. Every once in a while a manager will say that X (very large) Project needs to be done by Y (way to soon) date. I’ll let you in on a little secret: this is counter productive. Few developers work better under pressure. Developers (and I’d argue everyone) work best with enough work to keep us busy, but not so much that we don’t get to see our families or have a weekend.&lt;/p&gt;

&lt;p&gt;What is often most frustrating in these situations (it’s happened this way to me before) is that the manager knew about this request from the CEO for months but didn’t think to discuss it with the developers. And because of the delay requirements weren’t developed properly and everyone will be scrambling to understand this huge problem in a very short time and will be delivering their poorest work because they aren’t getting enough sleep.&lt;/p&gt;

&lt;p&gt;Okay, rant over.&lt;/p&gt;
&lt;h4&gt;The Solution&lt;/h4&gt;
&lt;p&gt;A sustainable pace in software development requires more than just time. Planning is just as crucial, but not just any kind of planning: smart planning &lt;strong&gt;&lt;em&gt;with the developers&lt;/em&gt;&lt;/strong&gt; who will be working on the feature. What constitutes smart planning? A careful consideration of the features you want, with feedback from developers taken into consideration.&lt;/p&gt;

&lt;p&gt;I’m going to borrow an analogy from a former boss. Imagine, if you will, a triangle. Each point represents an aspect of software development in practice. One represents Time, another represents Features, and the last represents Quality. As with most things in life, you can’t have everything, you must choose which two points are most valuable to you. By imposing a deadline by which all of these features must be finished you are choosing Time and Features and neglecting &lt;del&gt;arguably&lt;/del&gt; the most important element on our diagram.&lt;/p&gt;

&lt;p&gt;A more sensible approach is to choose one of the other two options. If you choose Time and Quality, you’ll have to prioritize which features are most important (which probably means reducing scope and scaling back) and choose only what the developers are comfortable committing to complete within the allotted time. This is the option I would opt for most of the time.&lt;/p&gt;

&lt;p&gt;You may also choose Quality and Features which means it will get done when it get’s done, but you’ll know that what you have is the right product with good quality. The drawback I see in this is that by ignoring the time element you often (though not always) lose valuable feedback you get through iterative designs.&lt;/p&gt;
&lt;h3&gt;Am I quixotic?&lt;/h3&gt;
&lt;p&gt;Probably. I’m that way a lot. But I before you dismiss my musings I hope you will consider the value each developer brings. In my next post in this series I’ll address this. As always, post your thoughts below.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 May 2015 01:00:13 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/2015/05/26/the-cause-of-poor-code.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/2015/05/26/the-cause-of-poor-code.html</guid>
        
        
      </item>
    
      <item>
        <title>I Am Not A Mokey</title>
        <description>&lt;p&gt;To start this post off I want to ask you a question:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;What value does a software engineer bring to a company?&lt;/p&gt;
&lt;p&gt;I’ll even give you some options to choose from.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt; Software engineers can speak computer (programming languages, etc).&lt;/li&gt;
	&lt;li&gt; Software engineers can speak human &lt;em&gt;and&lt;/em&gt; computer (they provide an interface between what the customer wants and how to get it).&lt;/li&gt;
	&lt;li&gt;Software engineers can&#39;t speak (they like quite).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you answered one, two, or even three, you are wrong. Yes, that’s right, this was a trick question (or well… trick answers, the question is non-tricky, but none of the provided answer options were correct).&lt;/p&gt;

&lt;p&gt;So what is the correct answer? The most valuable thing that a software engineer can bring to a company is their critical thinking ability.&lt;/p&gt;
&lt;h3&gt;Wait, isn&#39;t that what execs and management are paid for?&lt;/h3&gt;
&lt;p&gt;Regardless of the way you categorize what &lt;em&gt;the boss&lt;/em&gt; does, software engineers must be valued first and foremost for their critical thinking skills. No one can raise the right questions who isn’t acquainted with the code and must interact with it in order to provide the needed solution. The unfortunate truth is that developers are often treated like trainable monkeys who accept direction and then preform a trick. In reality developers make business decisions every day—do you want a monkey making critical decisions?&lt;/p&gt;
&lt;h3&gt;What critical business decisions do developers make?&lt;/h3&gt;
&lt;p&gt;Whenever there is a question about requirements that isn’t specified in the requirements for a feature a decision is made. A smart engineer will determine which questions need more input from the business or customer, because if she were to ask about every question that comes up then she would spend her entire day asking questions. The smart engineer will be able to gauge, with her critical thinking skills, which questions she can devise her own best solution for and which ones need more clarification. She will also be able to provide valid options to the client in the event that she determines that she does not have enough information to proceed.&lt;/p&gt;

&lt;p&gt;A developer does not possess the necessary critical thinking skills will not see any points that need clarification or guess at a solution without proper measurement to determine if it was the right answer or will provide a never-ending stream of questions to the client to the point that the client just gets tired of them being around.&lt;/p&gt;

&lt;p&gt;As you can see, there is a fine line between getting it right and getting it wrong. And of course it’s true that developers will make the wrong move on occasion, no one is perfect. But with the proper critical thinking skills they will get it right more often that wrong and save you money.&lt;/p&gt;
&lt;h3&gt;Do you want to ship that job overseas?&lt;/h3&gt;
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I’m not avers to working with developers in other counties to solve the problems that need to be faced. I have, however, witnessed a blatant disregard for the familiarity with the code that an on shore team had and was ultimately replaced with an off shore team.&lt;/p&gt;

&lt;p&gt;In truth, people from different cultures and backgrounds can provide different kinds of critical thinking. There may still be challenges, but a skilled developer is a great asset to any team whether he is in the US or in India. Some may say that overseas developers won’t be able to&lt;/p&gt;

&lt;p&gt;To a large extent communication is a large part of it. If you find that communicating two times a day early in the morning or late at night is adequate, then maybe an off shore team is okay. While language barriers can be overcome they can still prevent challenges. In the end you must communicate your vision to the developer if you have any hope of being able to build your software application successfully.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2015 13:50:52 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/2015/05/20/i-am-not-a-mokey.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/2015/05/20/i-am-not-a-mokey.html</guid>
        
        
      </item>
    
      <item>
        <title>A Better Way</title>
        <description>&lt;p&gt;Since the onset of my programming career it seemed to me that there must be a better way.&lt;/p&gt;

&lt;p&gt;In college I really enjoyed learning how to “think like a computer” (as one teacher put it). I got very good at dissecting each problem and tuning the gears and syntax of a language to make the programs work well. I felt destined to be a great coder and I was excited for the destiny that surely awaited.&lt;/p&gt;

&lt;p&gt;In the more advanced courses, shortly before graduation, I felt a resistance to some of the more complex patterns and practices, but I didn’t question them because I knew that I was just some silly undergraduate with no real experience—and besides, all I needed was time to understand the new practices that seemed a bit odd and I would be able to master those too. Despite my hesitance, I did very well in my classes. I really enjoyed my professors and it seemed that they were impressed by me as well.&lt;/p&gt;

&lt;p&gt;And then I graduated.&lt;/p&gt;

&lt;p&gt;I had a rude awakening in my first job when I realized how little I really knew and when I discovered how very &lt;em&gt;wrong&lt;/em&gt; the code I inherited and was expected to curate was.&lt;/p&gt;

&lt;p&gt;In each job I’ve begun I’ve made the same realizations—I don’t know enough and I’ll be working on some ugly code.&lt;/p&gt;

&lt;p&gt;I’ve attempted to address the first issue, and I continue to educate myself continually (as well as can be expected for a full-time worker who also has a two-year-old).&lt;/p&gt;

&lt;p&gt;As for the second point, however, I’m almost beginning to wonder if the software project exists that I wouldn’t classify as abysmal in its architecture, organization, and/or general messed-up-ness. Perhaps the odds have been stacked against me and I’ve just been unlucky with the jobs that I’ve had, but the way other programmers talk there are even worse faits than the piles of spaghetti code I’ve worked on.&lt;/p&gt;

&lt;p&gt;This isn’t to say that all the code I’ve worked on has been completely bad, there was certainly strong points in each code base that I’ve worked on. It’s also certainly true that I’m not nearly as experienced as other software engineers and perhaps I wouldn’t recognize good code if I saw it. But, well, I’m pretty arrogant and I don’t think that’s the case.&lt;/p&gt;

&lt;p&gt;I’m starting to wonder if what Tolstoy says of &lt;a href=&quot;http://www.goodreads.com/quotes/7142-all-happy-families-are-alike-each-unhappy-family-is-unhappy&quot; target=&quot;_blank&quot;&gt;happy and unhappy families&lt;/a&gt; can be said of software as well:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;All good code is alike; all bad code is bad in its own way.&lt;/p&gt;
&lt;p&gt;But one thing bothers me more than anything else: What is good code?&lt;/p&gt;

&lt;p&gt;Is there one true way to code that is superior to all other methods? Is there a language that is better than all the rest? If there is a better way to organize, write, create, and author code; does anyone know what it is?&lt;/p&gt;

&lt;p&gt;To be sure there are a lot of opinions out there. I’m not interested in opinions! I want facts. Something that can be proven and is measurable. There is a litmus test for this better way:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Are fewer bugs recorded?&lt;/li&gt;
	&lt;li&gt;Is the code easy to follow and understand?&lt;/li&gt;
	&lt;li&gt;Is there added complexity and overhead required that isn&#39;t necessary (rather than the pomp and circumstance you see with a good number of frameworks)?&lt;/li&gt;
	&lt;li&gt;How easy it is to respond to errors?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don’t purport to have all the answers, I may be close to understanding some of them, but there is also the danger of finding more questions along the way….&lt;/p&gt;

&lt;p&gt;(This is the first post in a series: &lt;a href=&quot;/tag/a-better-way/&quot;&gt;A Better Way&lt;/a&gt;.)&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 01:00:29 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/2015/05/12/a-better-way.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/2015/05/12/a-better-way.html</guid>
        
        
      </item>
    
      <item>
        <title>An Apologist&#39;s Defense of Trunk-based Development</title>
        <description>&lt;p&gt;There are two prevailing thoughts about source code management in contemporary software development with multi-member teams: trunk-based development and the feature branch model (or pull-request model). Looking at GitHub alone will surly lead you to believe that the only way to develop with a distributed source control system is using the pull-request model, but then there are technology pundits out there who opine that the only way to use git (or one of its relatives) is using the trunk based development model.&lt;/p&gt;

&lt;p&gt;This disparity (the masses using one model, but the role-models prescribing another) has understandably led to confusion in the tech industry. After reading &lt;a href=&quot;http://martinfowler.com/bliki/FeatureBranch.html&quot;&gt;Martin Fowler’s excellent description of Trunk Based Development&lt;/a&gt; (which he refers to as it’s more classical, but now overloaded, terminology: Continuous Integration) I found a few bloggers that didn’t like Martin Fowler’s suggestions. I’m going to address the article found &lt;a href=&quot;http://web.archive.org/web/20110721063430/http://jamesmckay.net/2011/07/why-does-martin-fowler-not-understand-feature-branches/&quot;&gt;here&lt;/a&gt; by James McKay (whom I will refer to as JM). I will attempt to assuage some of their concerns and answer some of the questions they have in this post.&lt;/p&gt;
&lt;h3&gt;Continuous Integration &lt;em&gt;is&lt;/em&gt; At Odds With Feature Branching&lt;/h3&gt;
&lt;p&gt;The first point that JM brings up is, “[Martin Fowler and Mike Mason] are saying that Feature Branching is incompatible with Continuous Integration.” I believe that the source of the confusion here is simply a case of semantics and history.&lt;/p&gt;

&lt;p&gt;Continuous Integration (as I eluded to previously) has multiple meanings today. The history of the term is described very well on &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Wikipedia&lt;/a&gt;, but it would do well to quote the opening line, “&lt;b&gt;Continuous integration&lt;/b&gt; (&lt;b&gt;CI&lt;/b&gt;) is the practice, in software engineering, of merging all developer working copies with a shared mainline several times a day.” As you can see its original meaning had nothing to do with build servers, but various vendors coopted the term (quite successfully) and  the original meaning is lost on some developers. Continuous Integration originally meant just that—integrating continuously. Integrating all the new code you wrote as frequently as you can with what is the latest code on a single branch. Everyone has the same version of the latest code. With Feature Branching you don’t share this promise. Everyone may have the latest code from a shared branch, but they also have their own dirty little secrets which none of the other branches share.&lt;/p&gt;

&lt;p&gt;Git and Mercurial often show a representation of a commit history something like this for feature branches:&lt;a href=&quot;/uploads/2015/05/feature-branches.png&quot;&gt;
&lt;img class=&quot;alignleft size-medium wp-image-730&quot; src=&quot;/uploads/2015/05/feature-branches-300x120.png&quot; alt=&quot;feature-branches&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The blue branch in the middle is the shared, common, dev, develop, whatever-you-want-to-call-it branch. The plan is to release whatever is on the blue branch. The red and yellow branches are feature branches that have branched off of the blue branch. Unfortunately this image is misleading. The red and yellow branches may be merging frequently with the blue branch, but they aren’t as close to each other as they may seem. The red and yellow branches are actually drifting further and further apart. Something like the next image:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/uploads/2015/05/feature-branches-reality.png&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-729&quot; src=&quot;/uploads/2015/05/feature-branches-reality-300x233.png&quot; alt=&quot;feature-branches-reality&quot; width=&quot;300&quot; height=&quot;233&quot; /&gt;&lt;/a&gt;The blue branch, which is still getting commits (presumably from other branches) is still the same distance from both red and yellow, but red and yellow are much further apart., The more code that is added to red but not to yellow or to yellow but not to red the more different they become. The longer time goes without merging the code from red and yellow together (as well as any other feature branches) the further apart they two branches will drift, even if they are continually merging with blue.&lt;/p&gt;

&lt;p&gt;This leads us to a natural question about what happens when one of these branches merges with the shared blue branch. I’m glad you asked, I’ve got an image for that:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/uploads/2015/05/feature-branch-after-merge.png&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-728&quot; src=&quot;/uploads/2015/05/feature-branch-after-merge-300x260.png&quot; alt=&quot;feature-branch-after-merge&quot; width=&quot;300&quot; height=&quot;260&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the third image you see that the yellow branch is nowhere near where the blue branch is anymore. In fact it is further from blue than when it started because now the blue branch is also the red branch and so yellow is actually as far away from its parent as it was from the red branch.&lt;/p&gt;

&lt;p&gt;This will remain the case until a merge occurs which will likely cause a &lt;em&gt;huge&lt;/em&gt; merge conflict and while merge conflicts would happen even when using trunk based development, they occur are more regulated and more manageable intervals (more on that later).&lt;/p&gt;

&lt;p&gt;Obviously this is an image and I haven’t calculated the actual difference between the red and yellow branches, theoretically this could be done with an algorithm that tracked differences, but the point is clear: when using feature branches you are often in danger of working on a branch that is very different from the other feature branches and when one of them merges before your branch merges then you will have to deal with the problem of finding out how to merge the two very different code bases together.&lt;/p&gt;

&lt;p&gt;The problem highlighted is known as &lt;em&gt;delayed integration&lt;/em&gt; which, just like it sounds, is exactly the opposite of Continuous Integration and means that the developers involved have waited to integrate their code with others’ code. That’s why feature branches are at odds with Continuous Integration, because they are nothing alike.&lt;/p&gt;
&lt;h3&gt;Merging Isn&#39;t So Bad&lt;/h3&gt;
&lt;p&gt;JM declares that they didn’t feel that merging was so bad (maybe not is so many words). They’re right. But it is dangerous, and in more ways than one. In fact there are three ways that merging is dangerous. The first is obvious, the developer preforming the merge may make a mistake. Maybe they misunderstood the other developer’s code or they could have forgotten exactly what that piece of code was supposed to do. It’s true that this is a problem that can be retroactively rectified, but it’s still inconvenient.&lt;/p&gt;

&lt;p&gt;The second is a little less obvious and doesn’t have anything to do with the actual merge process, but in the fact that merging must wait. The problem arrises when you have to wait to share code! Just the other day I overheard two developers talking. One of them needed some code that the other had written, but they were working in two different branches. They spent probably ten minutes thinking of ways to get Git to share parts of one branch with the other, but not merging the whole branch.&lt;/p&gt;

&lt;p&gt;The last way that merging is dangerous is because it gets more difficult with time. I like to think of it as gum on a sidewalk. If someone spits gum on the sidewalk (it wasn’t you, of course, because it is a nasty habit) it’s really quite easy to get it off the ground and into a trash bin. But if you wait a week, chances are that it has been stepped on and trampled and it will take a long time to get it off (unless you have a high-powered presser washer handy).&lt;/p&gt;

&lt;p&gt;Merging little changes (like you do with trunk based development) is usually painless, but the longer you let changes go without merging them the greater the chance that you code will be more difficult to merge. This is one of the best features of Trunk Based Development: small merges, frequently.&lt;/p&gt;
&lt;h3&gt;Feature Toggles&lt;/h3&gt;
&lt;p&gt;There seems to be a lot of fear about feature toggles. Whether it done using branch by abstraction or permissions or some other method it’s basically a method to not call new code until the time comes when it is ready to turn them on. JM feels that feature toggling is actually more dangerous than keeping code completely isolated until it is ready to be used and I respect this fear. It’s true that there is a small amount of risk involved when toggling a feature that isn’t ready yet. But I want to point out a misunderstanding that he has and a benefit that feature toggles have that you wouldn’t get when using feature branches.&lt;/p&gt;

&lt;p&gt;First, James McKay says that feature branches is releasing code that is untested. This is untrue. We must keep in mind that trunk based development isn’t just a pattern for the repository—it is a pattern for the way we code as well. In trunk based development one never pushes code that hasn’t passed every unit test and doesn’t have unit test written for it as well. If you are careful, end users should never be running the code that isn’t ready, but if by some small chance they do it should be tested. (I don’t have time to get into the &lt;a href=&quot;http://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;classic unit tests vs the mockist approach&lt;/a&gt;, but there are differences of opinion about that in the software development world too. I believe that if unit tests are written using the classic approach, which is a manner that test more consistently with how a user may be using or misusing your system, then those tests will be more than adequate at preventing bugs in feature toggled software without manual tests of any kind.)&lt;/p&gt;

&lt;p&gt;The other benefit to using feature toggles comes into play when everything is working as designed, but you want to turn a feature off for a business reason. Maybe you are using a social network’s Oauth 2 authentication to login to your site, but then a competitor acquires them and you want to turn off everything in your site associated with them. If you’ve been using feature toggles this becomes a simple matter of reenabling the toggle that was in place—if not, you may need to go in and manually remove all traces by hand (introducing the chance for bugs and errors that wouldn’t have happened if you used a configuration or abstraction to keep a feature from being released). Of course this means whatever mechanism you are using to do your feature toggles can be reenabled and hasn’t been removed, but chances are good that it’s easier to reenable a feature toggle than to remove and replace code by hand.&lt;/p&gt;
&lt;h3&gt;Whatever Merge Goes&lt;/h3&gt;
&lt;p&gt;I’ve compared and contrasted two version control models, Trunk Based Development and Feature Branches. There is, however, a third option that gets some usage. Unfortunately this model sometimes gets confused with Trunk Based Development, but the two are very different. There isn’t really an official name for it, but I like to call it Whatever Merge Goes meaning a haphazard, non-regulated method for software version control.&lt;/p&gt;

&lt;p&gt;It’s confused with Trunk Based Development, because there is usually only one shared branch. The difference is that the trunk branch is treated carelessly. Developers aren’t required to run unit tests before committing and pushing code or to even write them. Stories are not polished before developers are expected to work with them (and the developers almost never helped define them) and so there is real risk that the features committed to for a coding cycle may only get half-way done by the deadline and won’t be able to be removed which will result in a traffic jam of last minute changes and half-tested code.&lt;/p&gt;

&lt;p&gt;Please don’t confuse a team working on a single shared branch with Trunk Based Development. Trunk Based Development requires discipline and diligence. Adequate tests, discipline to run them and verify the build won’t break, and frequent pushes (not just when your code if &lt;em&gt;finished&lt;/em&gt; but when it’s in a stable state) and pulls are all a vital part of Trunk Based Development. Between having no process and having Feature Branches, I’d choose Feature Branches too even though that will only go so far to improve the situation.&lt;/p&gt;
&lt;h3&gt;When to Choose Feature Branches&lt;/h3&gt;
&lt;p&gt;In all professionally developed projects I would use Trunk Based Development. With personal projects (where you or a small group of friends are working on an application) I’d use Trunk Based Development. The only time I would consider branching is when I was working with an open source project and didn’t know if I could trust the other developers contributing.&lt;/p&gt;

&lt;p&gt;For an excellent resource regarding Trunk Based Development refer to &lt;a href=&quot;http://paulhammant.com&quot;&gt;Paul Hammant’s blog&lt;/a&gt;, he has several articles talking about what Trunk Based Development is, why it’s better, and about how companies like Facebook and Google use Trunk Based Development.&lt;/p&gt;

&lt;div class=&quot;archived comments&quot;&gt;

&lt;div class=&quot;comment&quot;&gt;&lt;blockquote&gt;First, James McKay says that feature branches is releasing code that is untested.&lt;/blockquote&gt;

I think you meant to say &quot;feature toggles&quot; here.

While I&#39;m suggesting edits, &quot;eluded&quot; should be &quot;alluded&quot;, &quot;they two&quot; should be &quot;the two&quot;, &quot;not is so&quot; —&amp;gt; &quot;not in so&quot;, &quot;you code&quot; —&amp;gt; &quot;your code&quot;, &quot;presser&quot; —&amp;gt; &quot;pressure&quot;, and &quot;Oauth 2&quot; —&amp;gt; something that actually works.  (You should take heart in the fact that the only first draft I&#39;ve seen of Martin Fowler&#39;s was littered with typos and omitted words.)

I, too, am dismayed at the abuse of the term &quot;Continuous Integration&quot;: &quot;Of course we do Continuous Integration: we have our Continuous Integration server all set up, with a build for every feature branch!  It&#39;s especially useful at the end of the month when we integrate all the feature branches.&quot;

Another pitfall I&#39;ve seen is teams implementing &quot;Continuous Integration&quot; by merging &lt;i&gt;from&lt;/i&gt; master (or &quot;trunk&quot; or &quot;main&quot; or &quot;mainline&quot;) multiple times a day—until they all realize this is pointless, because nobody&#39;s merging anything &lt;i&gt;into&lt;/i&gt; master until the last couple days of the sprint.  Maybe &quot;trunk-based development&quot; would be a useful label for avoiding this situation.  &lt;div class=&quot;by&quot;&gt;George Paci on 2015-08-29 09:40:47.0  &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 11 May 2015 08:45:26 -0700</pubDate>
        <link>http://tuesdaydeveloper.com/2015/05/11/an-apologists-defense-of-trunk-based-development.html</link>
        <guid isPermaLink="true">http://tuesdaydeveloper.com/2015/05/11/an-apologists-defense-of-trunk-based-development.html</guid>
        
        
      </item>
    
  </channel>
</rss>
